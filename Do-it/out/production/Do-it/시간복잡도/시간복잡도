시간 복잡도 표기법
알고리즘에서 시간 복잡도는 주어진 문제를 해결하기 위한 연산 횟수를 말한다. 수행시간은 1억번의 연선을 1초의 시간으로 간주하여 예측한다.

시간 복잡도의 유형
빅-오메가 : 최선일 때(best case)의 연산 횟수를 나타낸 표기법
빅-세타 : 평균일 때(average case)의 연산 횟수를 나타낸 표기법
빅-오 : 최악일 때(worst case)의 연산 횟수를 나타낸 표기법

* 코딩 테스트에서는 빅-오 표기법을 기준으로 수행 시간을 계산하는 것이 좋다. 실제 테스트에서는 1개의 테스트 케이스로 합격, 불합격을 결정하지 않고 작성한 프로그램을
  바탕으로 다양한 테스트 케이스를 수행해 모든 케이스를 통과해야만 합격하므로 시간 복잡도를 판단할 때에는 최악으로 계산하는 것이 좋다.


연산 횟수 = 알고리즘 시간 복잡도 * 데이터의 크기
버블 정렬 : 10억번의 연산 횟수가 필요하다.
병합 정렬 : 2000만번의 연산 횟수가 필요하다.

* 시간 복잡도 도출 기준
1. 상수는 시간 복잡도 계산에서 제외한다.
2. 가장 많이 중첩된 반복문 수행 횟수가 시간 복잡도의 기준이 된다.
ex) 연산 횟수가 n인 경우 for문이 1개이고 연산 횟수가 3n인 경우에는 독립된 for문이 3개이다. 연산 횟수가 n의 제곱이라면 이중 for문을 사용한 것이다.
* 여기서 유의할 점은 연산 횟수가 n과 3n은 3배 차이로 보이지만 시간 복잡도 도출 기준에 1번에 따르몬 상수는 무시한다는 것으로 n과 3n의 시간 복잡도는 모두 같다.
  시간 복잡도는 가장 많이 중첩된 반복문을 기준으로 도출하므로 이중 for문이 전체 코드의 시간 복잡도 기준이 된다.

디버깅
프로그램에서 발생하는 문법 오류나 논리 오류를 찾아 바로잡는 과정을 디버깅이라고 한다. 문법 오류는 컴파일러가 자동으로 찾아주므로 테스트할 때 문제가 되지 않지만
논리 오류는 코드가 사용자의 의도와 다르게 동작하는 것이며 다양한 형태로 발생한다.

디버깅 하는 방법
1. 코드에서 디버깅하고자 하는 줄에 중단점을 설정한다. 이 때 중단점은 여러 개 설정 가능하다.
2. IDE의 디버깅 기능을 실행하면 코드를 1줄씩 실행하거나 다음 중단점까지 실행할 수 있으며 이 과정에서 추적할 변숫값도 지정할 수 있다.
   이 방법으로 변숫값이 자신이 의도한 대로 바뀌는지 파악한다.
3. 변숫값 이외에도 원하는 수식을 입력해 논리 오류를 파악할 수 있다.

코딩 테스트를 진행하며 실수하기 쉬운 4가지 오류 찾아보기
1. 변수 초기화 오류
2. 반복문에서 인덱스 범위 지정 오류
3. 잘못된 변수 사용 오류
4. 자료형 범위 오류